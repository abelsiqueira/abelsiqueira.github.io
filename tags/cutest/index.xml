<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cutest on Abel Soares Siqueira</title><link>/tags/cutest/</link><description>Recent content in Cutest on Abel Soares Siqueira</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 17 Feb 2017 00:00:00 +0000</lastBuildDate><atom:link href="/tags/cutest/index.xml" rel="self" type="application/rss+xml"/><item><title>NLPModels.jl and CUTEst.jl: Constrained optimization</title><link>/blog/2017-02-17-nlpmodelsjl-and-cutestjl-constrained-optimization/</link><pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate><guid>/blog/2017-02-17-nlpmodelsjl-and-cutestjl-constrained-optimization/</guid><description>&lt;p>This is a continuation of &lt;a href="https://abelsiqueira.github.io%7B%7Blocal_prefix%7D%7Dnlpmodelsjl-cutestjl-and-other-nonlinear-optimization-packages-on-julia/">this
post&lt;/a>.
And again, you can follow the commands of this post in the
&lt;a href="https://asciinema.org/a/103654">asciinema&lt;/a>.&lt;/p>
&lt;p>If you followed along last post, you should know the basics of our
NLPModels API, including CUTEst access.&lt;/p>
&lt;p>One thing I didn&amp;rsquo;t explore, though, was constrained problems.
It&amp;rsquo;d complicate too much.&lt;/p>
&lt;p>However, now that we know how to handle the basics, we can move to the
advanced.&lt;/p>
&lt;p>&lt;strong>Nonlinear Programming format&lt;/strong>&lt;/p>
&lt;p>The NLPModels internal structure is based on the CUTEst way of storing a
problem.
We use the following form for the optimization problem:&lt;/p></description></item><item><title>NLPModels.jl, CUTEst.jl and other Nonlinear Optimization Packages on Julia</title><link>/blog/2017-02-07-nlpmodelsjl-cutestjl-and-other-nonlinear-optimization-packages-on-julia/</link><pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate><guid>/blog/2017-02-07-nlpmodelsjl-cutestjl-and-other-nonlinear-optimization-packages-on-julia/</guid><description>&lt;p>A couple of weeks ago me and Professor &lt;a href="https://dpo.github.io">Dominique Orban&lt;/a> have finally made a release of
CUTEst.jl, a wrapper for the CUTEst repository of problems for nonlinear
optimization (which I&amp;rsquo;ve mentioned before).
Along with this release, we&amp;rsquo;ve done a release of NLPModels.jl, the underlying
package. I think it&amp;rsquo;s time I explain a little about these packages, others,
and how to use them together.
If you want to see the output of the commands, you can open
&lt;a href="https://asciinema.org/a/102371">this ASCIInema&lt;/a>
side by side.&lt;/p></description></item><item><title>Installing CUTEst and CUTEst.jl</title><link>/blog/2015-10-01-installing-cutest-and-cutestjl/</link><pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate><guid>/blog/2015-10-01-installing-cutest-and-cutestjl/</guid><description>&lt;p>This post will tell you how to install CUTEst using a different tool that makes
it much easier. Also, I&amp;rsquo;ll install CUTEst.jl, the CUTEst interface for Julia.&lt;/p>
&lt;p>&lt;strong>Edit:&lt;/strong> &lt;em>Now, CUTEst.jl install CUTEst by itself. Check &lt;a href="https://abelsiqueira.com/blog/nlpmodelsjl-cutestjl-and-other-nonlinear-optimization-packages-on-julia/">this
post&lt;/a>.
Also, for Linux, I&amp;rsquo;ve created &lt;a href="https://github.com/abelsiqueira/linux-cutest">this CUTEst
installer&lt;/a>, which should be
easier to use. February, 11, 2017&lt;/em>.&lt;/p>
&lt;p>&lt;strong>Edit:&lt;/strong> &lt;em>Some corrections were made on February, 15, 2016&lt;/em>.&lt;/p>
&lt;p>&lt;strong>Edit:&lt;/strong> &lt;em>Some corrections were made on November, 11, 2015&lt;/em>.&lt;/p></description></item><item><title>CUTEst.jl</title><link>/blog/2015-02-06-cutestjl/</link><pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate><guid>/blog/2015-02-06-cutestjl/</guid><description>&lt;p>About an year ago,
&lt;a href="http://rgaiacs.com/">Raniere&lt;/a>
started working on a interface for
&lt;a href="http://ccpforge.cse.rl.ac.uk/gf/project/cutest/wiki/">CUTEst&lt;/a>.
He decided to create &lt;a href="https://github.com/lpoo/ugly">ugly&lt;/a>,
a repository for CUTEst, but following the Unix procedure for
building packages (&lt;code>./configure, make, make install&lt;/code>).
Also with ugly, he wanted to enable building a shared library
to be used with Julia.
This approach worked, but maintaining it is troublesome,
since it would require updating and testing of ugly for every
update of CUTEst.&lt;/p>
&lt;p>What I decided to do was find a way to create a shared library
from a working CUTEst installation.
This focuses on another principle: passing the blame, er,
I mean, modularity.
My package would simply take a working CUTEst and make a
working shared library from it.
It also served of downloading and installing a new CUTEst
installation, since this would be required for testing.
The work can be found at
&lt;a href="http://github.com/abelsiqueira/cutest-julia-installer">cutest-julia-installer&lt;/a>.&lt;/p></description></item><item><title>Selecting a Subgroup of CUTEst Problems According to Specific Criteria</title><link>/blog/2015-01-16-selecting-a-subgroup-of-cutest-problems-according-to-specific-criteria/</link><pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate><guid>/blog/2015-01-16-selecting-a-subgroup-of-cutest-problems-according-to-specific-criteria/</guid><description>&lt;p>For some time now I&amp;rsquo;ve been using CUTEst or CUTEr,
and one of the common problems is selecting the problem you
want to use.&lt;/p>
&lt;p>Unfortunately, the classification on the site is not updated,
and may contain errors, so I decided to create something,
with low requirements and high reliability, to select problems
according to a criteria.&lt;/p>
&lt;p>&lt;a href="https://github.com/abelsiqueira/cute-problem-chooser">This work&lt;/a>
was created before, but used the site&amp;rsquo;s classification as one
of the sources of information for the selection.
Now, I started from scratch, using Python, printing in JSON,
and running only &lt;code>sifdecode&lt;/code>, and only when needed.&lt;/p></description></item><item><title>CUTEst Com Matlab</title><link>/blog/2015-01-08-cutest-com-matlab/</link><pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate><guid>/blog/2015-01-08-cutest-com-matlab/</guid><description>&lt;p>No meu &lt;a href="https://www.youtube.com/watch?v=pM7FmOXHyns">vídeo do YouTube&lt;/a>,
eu ensinei como se faz para instalar o CUTEst. Hoje estendo a instalação
para instalar o MatLab também, mas para uma instalação mais detalhada,
talvez o vídeo seja mais indicado.&lt;/p>
&lt;p>Inicialmente instale o Matlab. Não vou entrar em detalhes, mas atente-se a duas
coisas:&lt;/p>
&lt;ul>
&lt;li>Algumas versões do matlab não colocam o executável num lugar &amp;ldquo;visível pelo&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>terminal&amp;#34;.
Para resolver, usando o bash, adicione o caminho dos executáveis do MATLAB
ao PATH no arquivo `~/.bashrc`.
Por exemplo, adicionando
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>PATH=/usr/local/MATLAB/R20XXc/bin:$PATH
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Você vai precisar do &lt;code>mex&lt;/code> (um link para ele é suficiente) no /bin.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Para resolver, pode fazer um link a partir do caminho original
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ sudo ln -s /usr/local/MATLAB/R20XXc/bin/mex /bin/
&lt;/code>&lt;/pre>&lt;p>Depois de instalado o Matlab,
vamos instalar o CUTEst. Você precisará do &lt;code>subversion&lt;/code> instalado (que
disponibiliza o comando &lt;code>svn&lt;/code>), e do compilador de fortran.
&lt;strong>A versão do compilador de fortran depende da versão do Matlab.&lt;/strong>&lt;/p></description></item></channel></rss>