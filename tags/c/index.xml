<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>c on Abel Soares Siqueira</title><link>https://abelsiqueira.com/tags/c/</link><description>Recent content in c on Abel Soares Siqueira</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 03 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://abelsiqueira.com/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>10 examples of embedding Julia in C/C++</title><link>https://abelsiqueira.com/blog/2022-11-03-10-examples-of-embedding-julia-in-c-cpp/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2022-11-03-10-examples-of-embedding-julia-in-c-cpp/</guid><description>I worked on this blog post working for the Netherlands eScience Center.
Check the blog post here.</description></item><item><title>A Study in Julia</title><link>https://abelsiqueira.com/blog/2015-01-22-a-study-in-julia/</link><pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2015-01-22-a-study-in-julia/</guid><description>Today I begin a study in Julia. This fantastic tool has syntax similar to that of Octave/Matlab, but is much faster. Furthermore, the interface with functions made in C and Fortran is much easier to accomplish, and since most things in computational mathematics are on these languages, this feature is wonderful.
My intented work is
make a simple julia and C interface, with auto-compiling and test on GitHub and Travis CI; develop a nonlinear optimization tool completely in Julia, then improve the slow bits by using C and/or Fortran; implement/improve the CUTEst interface [1], [2], possibly creating a SIF converter.</description></item></channel></rss>