<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Constrained on Abel Soares Siqueira</title><link>/tags/constrained/</link><description>Recent content in Constrained on Abel Soares Siqueira</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 17 Feb 2017 00:00:00 +0000</lastBuildDate><atom:link href="/tags/constrained/index.xml" rel="self" type="application/rss+xml"/><item><title>NLPModels.jl and CUTEst.jl: Constrained optimization</title><link>/blog/2017-02-17-nlpmodelsjl-and-cutestjl-constrained-optimization/</link><pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate><guid>/blog/2017-02-17-nlpmodelsjl-and-cutestjl-constrained-optimization/</guid><description>&lt;p>This is a continuation of &lt;a href="https://abelsiqueira.github.io%7B%7Blocal_prefix%7D%7Dnlpmodelsjl-cutestjl-and-other-nonlinear-optimization-packages-on-julia/">this
post&lt;/a>.
And again, you can follow the commands of this post in the
&lt;a href="https://asciinema.org/a/103654">asciinema&lt;/a>.&lt;/p>
&lt;p>If you followed along last post, you should know the basics of our
NLPModels API, including CUTEst access.&lt;/p>
&lt;p>One thing I didn&amp;rsquo;t explore, though, was constrained problems.
It&amp;rsquo;d complicate too much.&lt;/p>
&lt;p>However, now that we know how to handle the basics, we can move to the
advanced.&lt;/p>
&lt;p>&lt;strong>Nonlinear Programming format&lt;/strong>&lt;/p>
&lt;p>The NLPModels internal structure is based on the CUTEst way of storing a
problem.
We use the following form for the optimization problem:&lt;/p></description></item></channel></rss>