<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>constrained on Abel Soares Siqueira</title><link>https://abelsiqueira.com/tags/constrained/</link><description>Recent content in constrained on Abel Soares Siqueira</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 17 Feb 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://abelsiqueira.com/tags/constrained/index.xml" rel="self" type="application/rss+xml"/><item><title>NLPModels.jl and CUTEst.jl: Constrained optimization</title><link>https://abelsiqueira.com/blog/2017-02-17-nlpmodelsjl-and-cutestjl-constrained-optimization/</link><pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2017-02-17-nlpmodelsjl-and-cutestjl-constrained-optimization/</guid><description>This is a continuation of this post. And again, you can follow the commands of this post in the asciinema.
If you followed along last post, you should know the basics of our NLPModels API, including CUTEst access.
One thing I didn&amp;rsquo;t explore, though, was constrained problems. It&amp;rsquo;d complicate too much.
However, now that we know how to handle the basics, we can move to the advanced.
Nonlinear Programming format</description></item></channel></rss>