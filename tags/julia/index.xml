<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>julia on Abel Soares Siqueira</title><link>https://abelsiqueira.com/tags/julia/</link><description>Recent content in julia on Abel Soares Siqueira</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://abelsiqueira.com/tags/julia/index.xml" rel="self" type="application/rss+xml"/><item><title>Solving an RPG puzzle with Julia</title><link>https://abelsiqueira.com/blog/2023-04-27-solving-an-rpg-puzzle-with-julia/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2023-04-27-solving-an-rpg-puzzle-with-julia/</guid><description>I have a new video out where I talk about solving an RPG puzzle using Julia:
You can check the pluto notebook html here or download the notebook here.
Here&amp;rsquo;s a more fantastic setup than I used in the video:
You walk into a large room with a 3 pointed star painted on the floor. Three triangular stones sit on top of the points of the star. One of the points of the triangle complement the point of the star, indicating that there is a correct orientation for it.</description></item><item><title>10 examples of embedding Julia in C/C++</title><link>https://abelsiqueira.com/blog/2022-11-03-10-examples-of-embedding-julia-in-c-cpp/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2022-11-03-10-examples-of-embedding-julia-in-c-cpp/</guid><description>I worked on this blog post working for the Netherlands eScience Center.
Check the blog post here.</description></item><item><title>Can Python with Julia be faster than low-level code?</title><link>https://abelsiqueira.com/blog/2022-02-11-python-and-julia-3/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2022-02-11-python-and-julia-3/</guid><description>I worked on this blog post working for eScience Center. Co-authored by Faruk Diblen.
Check the blog post here.</description></item><item><title>Speed up your Python code using Julia</title><link>https://abelsiqueira.com/blog/2022-01-26-python-and-julia-2/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2022-01-26-python-and-julia-2/</guid><description>I worked on this blog post working for the Netherlands eScience Center. Co-authored by Faruk Diblen.
Check the blog post here.</description></item><item><title>How to call Julia code from Python</title><link>https://abelsiqueira.com/blog/2022-01-19-python-and-julia-1/</link><pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2022-01-19-python-and-julia-1/</guid><description>I worked on this blog post working for the Netherlands eScience Center. Co-authored by Faruk Diblen.
Check the blog post here.</description></item><item><title>Migração do site para Franklin.jl</title><link>https://abelsiqueira.com/blog/2021-06-28-migracao-franklin/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2021-06-28-migracao-franklin/</guid><description>Update 2022-12-30: Já não uso mais Franklin.jl.
Há algum tempo o Jekyll tem me dado trabalho. Como não sou usuário de Ruby, volta e meia falta alguma coisa na minha instalação e eu passo horas tentando corrigir o problema pra fazer meu site rodar localmente. Para o CiDAMO, eu considerei o Hugo, já que tem mais suporte e eu não seria a única pessoa a cuidar do site. Já para meu site pessoal, e o site do Julia Smooth Optimizers, resolvi usar Franklin, já que eu quero mais é usar Julia mesmo.</description></item><item><title>Koch snowflakes for the holidays</title><link>https://abelsiqueira.com/blog/2018-12-12-koch-snowflakes-for-the-holidays/</link><pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2018-12-12-koch-snowflakes-for-the-holidays/</guid><description>Code for these images.
I hope you&amp;rsquo;re familiar with the Koch curve fractal or snowflake. It essentially consists taking a line segment, splitting it in three, and substituting the middle part by two segments that form an equilateral triangle without the base. From one segment you obtain four. For each new segment, repeat the process.
Images:
The most important aspect of the koch line is that it looks awesome. Furthermore, you can do it for any image that is a collection of segments.</description></item><item><title>Package Development in Julia 1.0 using the REPL</title><link>https://abelsiqueira.com/blog/2018-12-05-package-development-on-julia-10/</link><pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2018-12-05-package-development-on-julia-10/</guid><description>This is a quick post on package development in Julia 1.0. Let me know if you&amp;rsquo;re interested in more, and what.
Suppose you&amp;rsquo;re developing a package - say, MyPackage.jl - whether from scratch, or updating from Julia 0.6. First, and foremost, you need to be able to run and test it. On Julia 1.0, this is one possible way, while using the REPL.
Choose a folder to develop it and create the necessary files</description></item><item><title>Optimizing the Dollar Game from Numberphile</title><link>https://abelsiqueira.com/blog/2018-09-04-the-dollar-game-from-numberphile/</link><pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2018-09-04-the-dollar-game-from-numberphile/</guid><description>I just watched The Dollar Game - Numberphile, in which a game involving graphs is presented. I recommend you watch the video for complete information.
The game involves a graph with integer values on its nodes, positive and negative. For instance, the following graph:
Each node corresponds to a person, the node value is the amount of money that person has, the edges are the people that person can give or take money from.</description></item><item><title>My experience in the JuMP-dev annual workshop</title><link>https://abelsiqueira.com/blog/2018-07-04-my-experience-in-the-jump-dev-annual-workshop/</link><pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2018-07-04-my-experience-in-the-jump-dev-annual-workshop/</guid><description>Last week I had the pleasure of being invited to the Second annual JuMP-dev workshop, which happened in June 27-29, 2018 at Bordeaux, France. I&amp;rsquo;ve presented the packages from the Julia Smooth Optimizers organization, and had a very good time meeting with the JuMP developers.
For those still unaware, JuMP is a modelling language for Mathematical Programming written in Julia. It provides access to a few different solvers for many kinds of problems, and it works inside of Julia, so one can enjoy the advantages of having a robust language if there is a need for advanced usage.</description></item><item><title>Minicurso de Julia no IX Simpósio de Análise Numérica e Otimização da UFPR</title><link>https://abelsiqueira.com/blog/2017-02-20-minicurso-de-julia-no-ix-simposio-de-analise-numerica-e-otimizacao-da-ufpr/</link><pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2017-02-20-minicurso-de-julia-no-ix-simposio-de-analise-numerica-e-otimizacao-da-ufpr/</guid><description>Hoje ministrarei mais um minicurso de Julia na UFPR. Desta vez será no IX Simpósio de Análise Numérica e Otimização da UFPR.
Por enquanto, deixo esta página apenas com o link para o notebook que utilizarei: aqui.</description></item><item><title>NLPModels.jl and CUTEst.jl: Constrained optimization</title><link>https://abelsiqueira.com/blog/2017-02-17-nlpmodelsjl-and-cutestjl-constrained-optimization/</link><pubDate>Fri, 17 Feb 2017 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2017-02-17-nlpmodelsjl-and-cutestjl-constrained-optimization/</guid><description>This is a continuation of this post. And again, you can follow the commands of this post in the asciinema.
If you followed along last post, you should know the basics of our NLPModels API, including CUTEst access.
One thing I didn&amp;rsquo;t explore, though, was constrained problems. It&amp;rsquo;d complicate too much.
However, now that we know how to handle the basics, we can move to the advanced.
Nonlinear Programming format</description></item><item><title>NLPModels.jl, CUTEst.jl and other Nonlinear Optimization Packages on Julia</title><link>https://abelsiqueira.com/blog/2017-02-07-nlpmodelsjl-cutestjl-and-other-nonlinear-optimization-packages-on-julia/</link><pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2017-02-07-nlpmodelsjl-cutestjl-and-other-nonlinear-optimization-packages-on-julia/</guid><description>A couple of weeks ago me and Professor Dominique Orban have finally made a release of CUTEst.jl, a wrapper for the CUTEst repository of problems for nonlinear optimization (which I&amp;rsquo;ve mentioned before). Along with this release, we&amp;rsquo;ve done a release of NLPModels.jl, the underlying package. I think it&amp;rsquo;s time I explain a little about these packages, others, and how to use them together. If you want to see the output of the commands, you can open this ASCIInema side by side.</description></item><item><title>Julia Fractal on Julia</title><link>https://abelsiqueira.com/blog/2017-01-15-julia-fractal-on-julia/</link><pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2017-01-15-julia-fractal-on-julia/</guid><description>I wanted a background that would update automatically in some interesting way, instead of just random images. After some thought, I decided to use some Julia fractals.
I made a code to create the Julia fractals in the Julia language, and then some code to run it for a random point.
The code is here, including some explaining on how to use and install it.
Here are some examples:</description></item><item><title>Advent of Code 2016 in Julia</title><link>https://abelsiqueira.com/blog/2016-12-18-advent-of-code-2016-in-julia/</link><pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2016-12-18-advent-of-code-2016-in-julia/</guid><description>Last year I discovered by chance a code competition that happens in the month of December: The Advent of Code. This event consists of small puzzles release every day of December, up to the 25th. Which amounts to 25 problems! (I can do math).
Last year I tried doing some on Bash, and latter switched to Julia, but never got to finish them. This year I decided to use Julia, because I want to test it for these general problems.</description></item><item><title>Apresentação de Julia no SMNE</title><link>https://abelsiqueira.com/blog/2016-11-29-smne-2016-julia/</link><pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2016-11-29-smne-2016-julia/</guid><description>Nos dias 30 de Novembro à 2 de Dezembro de 2016 acontece o primeiro Simpósio de Métodos Numéricos em Engenharia. Neste simpósio darei um minicurso sobre Julia.
Deixo aqui o material preliminar para os alunos do minicurso, ou interessados.
Notebook (necessário) exemplo.jl (necessário) HTML estático do notebook - para quem não conseguiu instalar Também deixo aqui o link do Etherpad para usarmos na aula.
Quem não conseguiu instalar até agora, pode tentar usar o JuliaBox, que roda Julia online.</description></item><item><title>Test Driven Development in Julia</title><link>https://abelsiqueira.com/blog/2016-03-13-test-driven-development-in-julia/</link><pubDate>Sun, 13 Mar 2016 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2016-03-13-test-driven-development-in-julia/</guid><description>First, what is Test Driven Development (TDD)? Well, I&amp;rsquo;m not an expert, so don&amp;rsquo;t quote me, but in practice it means that you develop your code to fulfill tests that you define prior to beginning your work. You do not define all your tests first, though. You define a single test, and produce code to pass it. Then you define another code, and produce code to pass both. And so forth until you complete your specification.</description></item><item><title>Minicurso de Julia para Otimização</title><link>https://abelsiqueira.com/blog/2016-02-28-minicurso-de-julia-para-otimizacao/</link><pubDate>Sun, 28 Feb 2016 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2016-02-28-minicurso-de-julia-para-otimizacao/</guid><description>Semana passada, nos dias 22 a 24 de Fevereiro aconteceu o VIII Simpósio de Análise Numérica e Otimização. Nesse evento, eu apresentei um minicurso de Julia com foco em Otimização não Linear. Entre 10 e 15 pessoas participaram no total, entre alunos de graduação, de pós-graduação, e professores. O objetivo principal era apresentar a linguagem e alguns detalhes importante para otimização não linear, o que foi obtido. Por outro lado, as aulas foram mais longas do que deveriam, e o conteúdo ficou muito esparso, pois tive que variar entre o básico e uma aplicação mais avançada.</description></item><item><title>Automated testing</title><link>https://abelsiqueira.com/blog/2016-02-21-automated-testing/</link><pubDate>Sun, 21 Feb 2016 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2016-02-21-automated-testing/</guid><description>We&amp;rsquo;re gonna learn how to make a test for your Julia code that runs whenever you publish it online. We&amp;rsquo;re gonna use
GitHub to store the code; Travis CI to run your tests; Coveralls.io to verify which lines of code your test are missing. Alternatively, for a open source alternative, see GitLab, which I don&amp;rsquo;t know enough yet.
Let&amp;rsquo;s make a litte code to solve a linear system, paying attention to the problems it may arise, like incorrect dimensions, underdetermined and overdetermined systems, singular matrices, etc.</description></item><item><title>VIII Simpósio de Análise Numérica e Otimização - Minicurso de Julia</title><link>https://abelsiqueira.com/blog/2016-02-14-viii-simposio-de-analise-numerica/</link><pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2016-02-14-viii-simposio-de-analise-numerica/</guid><description>Nos dias 22 a 24 de Fevereiro de 2016 acontecerá o VIII Simpósio de Análise Numérica e Otimização. É uma ótima oportunidade para interagir com colegas e conhecer alguns assuntos novos de pesquisa.
Em particular, nesse simpósio apresentarei um minicurso sobre Julia com foco em Otimização. O minicurso é voltado para pessoas que conhecem um pouco de MatLab ou alguma outra linguagem. Serão três dias, com uma introdução à linguagem, alguns exemplos, o CUTEst.</description></item><item><title>Installing CUTEst and CUTEst.jl</title><link>https://abelsiqueira.com/blog/2015-10-01-installing-cutest-and-cutestjl/</link><pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2015-10-01-installing-cutest-and-cutestjl/</guid><description>This post will tell you how to install CUTEst using a different tool that makes it much easier. Also, I&amp;rsquo;ll install CUTEst.jl, the CUTEst interface for Julia.
Edit: Now, CUTEst.jl install CUTEst by itself. Check this post. Also, for Linux, I&amp;rsquo;ve created this CUTEst installer, which should be easier to use. February, 11, 2017.
Edit: Some corrections were made on February, 15, 2016.
Edit: Some corrections were made on November, 11, 2015.</description></item><item><title>Workshop de Ferramentas Computacionais - Maio de 2015</title><link>https://abelsiqueira.com/blog/2015-04-13-workshop-de-ferramentas-computacionais-maio-de-2015/</link><pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2015-04-13-workshop-de-ferramentas-computacionais-maio-de-2015/</guid><description>Sobre No dia 30 de Maio de 2015 acontecerá uma Oficina de Ferramentas Computacionais para Pesquisadores. Essa oficina será focada em três ferramentas básicas para desenvolvimento de software:
Bash Git Julia O Bash é o terminal tradicinal dos sistemas GNU/Linux (a tela preta). As possibilidades de uso são ilimitadas, mas vamos focar no básico, tentando chegar até a criação de um script simples.
O Git é uma ferramenta para controlar versões de softwares e outros arquivos.</description></item><item><title>Apresentação no VII Simpósio de Análise Numérica e Otimização - UFPR</title><link>https://abelsiqueira.com/blog/2015-02-25-apresentacao-no-vii-simposio-de-analise-numerica-e-otimizacao-ufpr/</link><pubDate>Wed, 25 Feb 2015 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2015-02-25-apresentacao-no-vii-simposio-de-analise-numerica-e-otimizacao-ufpr/</guid><description>No dia 24 de Fevereiro de 2015 aconteceu o (primeiro dia do) VII Simpósio de Análise Numérica e Otimização. Participei deste congresso fazendo uma apresentação sobre Ferramentas Computacionais para Pesquisadores (ver código).
Nesta apresentação, introduzo algumas ferramentas que considero bastante importantes para pesquisadores, principalmente da área de matemática computacional. Um resumo do que apresento é
Aprenda outras linguagens. Recomendo, por exemplo, conhecer Python ou Ruby, Shell e Makefile. Com essas ferramentas já é possível automatizar testes e fazer scripts com uso variado.</description></item><item><title>CUTEst.jl</title><link>https://abelsiqueira.com/blog/2015-02-06-cutestjl/</link><pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2015-02-06-cutestjl/</guid><description>About an year ago, Raniere started working on a interface for CUTEst. He decided to create ugly, a repository for CUTEst, but following the Unix procedure for building packages (./configure, make, make install). Also with ugly, he wanted to enable building a shared library to be used with Julia. This approach worked, but maintaining it is troublesome, since it would require updating and testing of ugly for every update of CUTEst.</description></item><item><title>A Study in Julia</title><link>https://abelsiqueira.com/blog/2015-01-22-a-study-in-julia/</link><pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2015-01-22-a-study-in-julia/</guid><description>Today I begin a study in Julia. This fantastic tool has syntax similar to that of Octave/Matlab, but is much faster. Furthermore, the interface with functions made in C and Fortran is much easier to accomplish, and since most things in computational mathematics are on these languages, this feature is wonderful.
My intented work is
make a simple julia and C interface, with auto-compiling and test on GitHub and Travis CI; develop a nonlinear optimization tool completely in Julia, then improve the slow bits by using C and/or Fortran; implement/improve the CUTEst interface [1], [2], possibly creating a SIF converter.</description></item><item><title>The End of Fortran</title><link>https://abelsiqueira.com/blog/2014-11-22-the-end-of-fortran/</link><pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate><guid>https://abelsiqueira.com/blog/2014-11-22-the-end-of-fortran/</guid><description>One of my main interest is the end of Fortran as the only programming language used by mathematicias. If you&amp;rsquo;re not in the area of mathematical programming, you probably find it strange for me to be talking about Fortran, so I explain. Fortran is considered the fastest programming language in mathematics, and most things made are in this language. Other often used languages such as MatLab/Octave and Mathematica are high-level, which means they are slower and are not considered for serious applications.</description></item></channel></rss>