<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Abel Soares Siqueira</title><link>/tags/python/</link><description>Recent content in Python on Abel Soares Siqueira</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 11 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Can Python with Julia be faster than low-level code?</title><link>/blog/2022-02-11-python-and-julia-3/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>/blog/2022-02-11-python-and-julia-3/</guid><description>&lt;p>I worked on this blog post working for eScience Center.
This is the third and last part of a three-part series.
Co-authored by Faruk Diblen.&lt;/p>
&lt;p>Check the blog post &lt;a href="https://blog.esciencecenter.nl/can-python-with-julia-be-faster-than-low-level-code-cd71a72fbcf4">here&lt;/a>.&lt;/p></description></item><item><title>Speed up your Python code using Julia</title><link>/blog/2022-01-26-python-and-julia-2/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>/blog/2022-01-26-python-and-julia-2/</guid><description>&lt;p>I worked on this blog post working for the Netherlands eScience Center.
This is the second part of a three-part series.
Co-authored by Faruk Diblen.&lt;/p>
&lt;p>Check the blog post &lt;a href="https://blog.esciencecenter.nl/speed-up-your-python-code-using-julia-f97a6c155630">here&lt;/a>.&lt;/p></description></item><item><title>How to call Julia code from Python</title><link>/blog/2022-01-19-python-and-julia-1/</link><pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate><guid>/blog/2022-01-19-python-and-julia-1/</guid><description>&lt;p>I worked on this blog post working for the Netherlands eScience Center.
This is the first part of a three-part series.
Co-authored by Faruk Diblen.&lt;/p>
&lt;p>Check the blog post &lt;a href="https://blog.esciencecenter.nl/how-to-call-julia-code-from-python-8589a56a98f2">here&lt;/a>.&lt;/p></description></item><item><title>perprof-py: A Performance Profile Package for Python</title><link>/blog/2014-11-16-perprof-py-a-performance-profile-package-for-python/</link><pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate><guid>/blog/2014-11-16-perprof-py-a-performance-profile-package-for-python/</guid><description>&lt;p>One of the things I worked with was a Performance Profile tool, in the sense
of Dolan and MorÃ©. This tool,
&lt;a href="http://ufpr-opt.github.io/perprof-py">perprof-py&lt;/a>, written in Python,
reads input in the form of a table of problem with time and exitflag, and
outputs a image/pdf with the performance profile.
This tool is very important for the nonlinear optimization community, since it
is one of the main comparison tools for the algorithms.&lt;/p>
&lt;p>The package is open source, available for changes, improvements and suggestions.
Many options have been implemented to costumize the graphic, or to improve the
input of data. The source is available at
&lt;a href="http://github.com/ufpr-opt/perprof-py">github&lt;/a>.&lt;/p></description></item></channel></rss>